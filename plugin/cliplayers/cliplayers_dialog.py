# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ClipLayersDialog
                                 A QGIS plugin
 表示は範囲をGeoPackageにエクスポートする
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-04-28
        git sha              : $Format:%H$
        copyright            : (C) 2020 by インクリメントP株式会社
        email                : yonezawa@incrementp.co.jp
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtCore import QThread, pyqtSlot, pyqtSignal
from qgis.PyQt.QtWidgets import QDialog, QDialogButtonBox,QPushButton

from qgis.core import *
from qgis.core import QgsCoordinateReferenceSystem
from qgis.core import QgsSettings, QgsVectorLayer, QgsProject, QgsMessageLog
from qgis.gui import QgsFileWidget, QgsExtentGroupBox

from cliplayers.clipandexport import ClipByExtent


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'cliplayers_dialog_base.ui'))


class ClipLayersDialog(QDialog, FORM_CLASS):
    def __init__(self, iface, parent=None):
        """Constructor."""
        super(ClipLayersDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.iface = iface
        
        self.settings = QgsSettings("Incrementp", "cliplayerss")

        # ExtentGroupBoxにMaｐCanvasを設定
        self.mExtentGroupBox.setMapCanvas(self.iface.mapCanvas())
        self.mExtentGroupBox.setOutputExtentFromCurrent()

        # 常にJGD2000で表示
        self.mExtentGroupBox.setOutputCrs(QgsCoordinateReferenceSystem('EPSG:4612'))
        self.mExtentGroupBox.findChild(QPushButton, "mButtonCalcFromLayer").setEnabled(False)
        self.mExtentGroupBox.findChild(QPushButton, "mButtonDrawOnCanvas").setEnabled(False)

        # QgsMapCanvas のシグナルに接続
        canvas = self.iface.mapCanvas()
        canvas.extentsChanged.connect(self.mExtentGroupBox.setOutputExtentFromCurrent)

        self.mExportDBNameQgsFileWidget.setStorageMode(QgsFileWidget.SaveFile)
        self.mExportDBNameQgsFileWidget.setConfirmOverwrite(True)
        self.mExportDBNameQgsFileWidget.setDialogTitle(self.tr("エクスポート先のGeoPackageファイル名を指定する"))
        self.mExportDBNameQgsFileWidget.setDefaultRoot(self.settings.value("lastGpkgDirectory", QgsProject.instance().homePath(), str))
        self.mExportDBNameQgsFileWidget.setFilter(self.tr("GeoPackege (*.gpkg *.GPKG)"))
        self.mExportDBNameQgsFileWidget.fileChanged.connect(self.updateLastGpkgPath)

        self.mExportProjectNameQgsFileWidget.setStorageMode(QgsFileWidget.SaveFile)
        self.mExportProjectNameQgsFileWidget.setConfirmOverwrite(True)
        self.mExportProjectNameQgsFileWidget.setDialogTitle(self.tr("エクスポート先のプロジェクトファイル名を指定する"))
        self.mExportProjectNameQgsFileWidget.setDefaultRoot(self.settings.value("lastQGSProjectDirectory", QgsProject.instance().homePath(), str))
        self.mExportProjectNameQgsFileWidget.setFilter(self.tr("QGIS Projectfile (*.qgs *.QGS)"))
        self.mExportProjectNameQgsFileWidget.fileChanged.connect(self.updateLastQGSProjectPath)

        self.thread = QThread()
        self.exporter = ClipByExtent()

        self.btnOk = self.mDlgButton_box.button(QDialogButtonBox.Ok)
        self.btnCancel = self.mDlgButton_box.button(QDialogButtonBox.Cancel)

        self.exporter.exportError.connect(self.exportCanceled)
        self.exporter.exportMessage.connect(self.logMessage)
        self.exporter.exportFinished.connect(self.exportCompleted)
        self.exporter.exportProcessed.connect(self.updateProgress)

        # デバッグするときはスレッドを使わないほうがデバッグしやすい
        self.exporter.moveToThread(self.thread)
        self.exporter.exportError.connect(self.thread.quit)
        self.exporter.exportFinished.connect(self.thread.quit)
        self.thread.started.connect(self.exporter.clipAndExport)

        self.mMinMaxClearCheckBox.setChecked(self.settings.value("minmaxclear", True, bool))

    def closeEvent(self, event):
        self._saveSettings()
        self._restoreGui()
        QDialog.closeEvent(self, event)

    def updateLastGpkgPath(self, gpkgPath):
        self.mExportDBNameQgsFileWidget.setDefaultRoot(gpkgPath)
        self.settings.setValue("lastGpkgDirectory", os.path.dirname(gpkgPath))

    def updateLastQGSProjectPath(self, projectpath):
        self.mExportProjectNameQgsFileWidget.setDefaultRoot(projectpath)
        self.settings.setValue("lastQGSProjectDirectory", os.path.dirname(projectpath))

    def reject(self):
        self._saveSettings()
        self._restoreGui()
        QDialog.reject(self)

    def accept(self):
        self._saveSettings()

        gpkgName = self.mExportDBNameQgsFileWidget.filePath()
        if gpkgName == '':
            self.iface.messageBar().pushWarning(
                self.tr("出力先ファイル名未指定"),
                self.tr("出力先のファイル名がセットされていません。出力先ファイル名をセットしてください。"))
            return

        qgsName = self.mExportProjectNameQgsFileWidget.filePath()
        if qgsName == "":
            self.iface.messageBar().pushWarning(
                self.tr("出力先QGISプロジェクトファイル未指定"),
                self.tr("出力先QGISプロジェクトファイル名がセットされていません。出力先QGISプロジェクトファイル名をセットしてください。"))
            return

        self.exporter.setOutputGpkgPath(gpkgName)
        self.exporter.setOutputProjectPath(qgsName)
        self.exporter.setMinMaxClear(self.mMinMaxClearCheckBox.isChecked())

        # 表示エリアのエクステント以外ははじく ユーザ定義(直接入力)もはじく
        if self.mExtentGroupBox.extentState() !=  self.mExtentGroupBox.ExtentState.CurrentExtent:
            self.iface.messageBar().pushWarning(
                self.tr("エクステント指定"),
                self.tr("エクステント指定が不正です。キャンバスの領域を指定してください。"))
            return

        self.exporter.setExtent(self.mExtentGroupBox.outputExtent())

        self.btnOk.setEnabled(False)
        self.btnCancel.setEnabled(False)

        # デバッグするときはスレッドを使わないほうがデバッグしやすい
        self.thread.start()
        #self.exporter.clipAndExport()

    def updateProgress(self, value):
        self.mProgressBar.setValue(value)

    def logMessage(self, message, level=Qgis.Info):
        QgsMessageLog.logMessage(message, "cliplayers", level)
        self.mLogplainTextEdit.appendPlainText(message)

    def exportCanceled(self, message):
        self.iface.messageBar().pushWarning(self.tr("Export error"),
                                            message)
        self._restoreGui()

    def exportCompleted(self):
        self.iface.messageBar().pushSuccess(
            self.tr("Export completed"),
            self.tr("Export sucessfully."))

        #QDialog.accept(self)
        self.btnCancel.setEnabled(True)

    def _restoreGui(self):
        self.mProgressBar.setValue(0)
        self.btnOk.setEnabled(True)
        self.btnCancel.setEnabled(True)
        self.mLogplainTextEdit.clear()

    def _saveSettings(self):
        self.settings.setValue("minmaxclear", self.mMinMaxClearCheckBox.isChecked())
